srt {                #SRT
    # worker threads for sls, it is recommended than threads match the count of cpu core.
    worker_threads  2;

    # the max client connection for each worker thread, please set this value according the cpu ability
    worker_connections 300;

    # log file name, such as logs/error.log
    log_file /logs/error.log;

    # log level, include trace, debug, info, warning, error and fatal
    log_level debug;

    # statistic info url, sls will post the statistic info with it
    #stat_post_url http://192.168.31.106:8001/sls/stat;

    # the interval of posting the statistic info to server, unit seconds(s).
    #stat_post_interval  5;

    # the prefix of record hls, example: /tmp/mov/sls;
    # the full record path is: /tmp/mov/sls/$listen/$domain_publisher/$app_publisher/
    # $stream_name the default vod record filename is: /tmp/mov/sls/$listen/$domain_publisher/
    # $app_publisher/$stream_name/vod.m3u8 when publisher stop, the vod record file will be generated.
    #record_hls_path_prefix /tmp/mov/sls;

    # video on demand location.
    #vod  file name: /tmp/mov/sls/$listen/$domain_publisher/$app_publisher/$stream_name/vod.m3u8

    server {
        # the sls listen port.
        listen 1935;

        # the net latency of srt. unit (ms).. max 256
        latency 256;

        # the play url domain name which can be more than one, divided by space.
        # example: live.sls.com live-1.sls.com output;
        domain_player output;

        # the publish url domain name witch mast be single.
        # example: live.sls.com live-1.sls.com input;
        domain_publisher input;

        # accept connections at the same time.
        # default = 100
        backlog 100; 

        # the timeout of no data, when timeout the server will discard the client.
        # unit s, -1 is unlimited, for player and publisher
        idle_streams_timeout 60;

        # the sls post the on_connect and on_close event to the http manager server, the syntax of the post url is like:
        # http://192.168.31.106:8000/sls/on_event?method=on_connect|on_close&role_name=%s&srt_url=%s&remote_ip=%s&remote_ip=%d 
        # in the http manager server, we can check the connection through the role name, srt_url, remote ip and remote port, 
        # if return not http reponse code 200 OK, the connection will be refused. we also can record the begin time and end 
        # time for the connection.
        #on_event_url http://192.168.31.106:8000/sls/on_event; #?method=on_connect|on_close&role_name=&srt_url=%s

        app {
            # player app name, the srt url is like rtmp's, such as :srt://domain/live/stream_name;
            # default = live
            app_player live;

            # the publisher app name;
            # default = live
            app_publisher live;

            # the record hls switch, on, off, default is off.
            #record_hls off;

            # the dutaion of ts segment, unit s, default is 10s.
            #record_hls_segment_duration 10; #unit s

            #relay {
                # the type of relay, support two type: pull, push;
                #type pull;

                # the relay mode, support two mode: loop, hash; in the loop mode, sls will loop to connect 
                # upstreams url one by one until connection is successfully. in the hash mode, sls will 
                # connect the upstreams server with the url hash.
                #mode loop;#loop; hash;

                # reconnect interval when connection is failed, unit s;
                #reconnect_interval 10;

                # the timeout of no data, when timeout the server will discard the relay. unit s, -1 is unlimited.
                #idle_streams_timeout -1;#s -1: unlimited

                # the relay upstream url, if there are more than one, divide with space, 
                # such as: 127.0.0.1:9090?streamid=live.sls.com/live 192.168.1.100:8080/?streamid=live.test.com/live;
                #upstreams 127.0.0.1:9090?streamid=live.sls.com/live 192.168.1.100:8080/?streamid=live.test.com/live;
            #}

            #relay {
                # the type of relay, support two type: pull, push;
                #type push;

                # the relay mode, support two mode: loop, hash; in the loop mode, sls will loop to connect 
                # upstreams url one by one until connection is successfully. in the hash mode, sls will 
                # connect the upstreams server with the url hash.
                #mode all; #all; hash

                # reconnect interval when connection is failed, unit s;
                #reconnect_interval 10;

                # the timeout of no data, when timeout the server will discard the relay. unit s, -1 is unlimited.
                #idle_streams_timeout 10;#s -1: unlimited

                # the relay upstream url, if there are more than one, divide with space, 
                # such as: 127.0.0.1:9090?streamid=live.sls.com/live 192.168.1.100:8080/?streamid=live.test.com/live;
                #upstreams 192.168.31.106:8080?streamid=uplive.sls.com/live ;
            #}
        }
    }
}
